# -*- coding: utf-8 -*-
"""Projeto TCC Unicap RASA Chatbot Nicolas Rodrigues.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bhp0sJNYgYZ2gJ_Tf1-UzJal1llc8WPI
"""

!pip install tensorflow==2.7.0

# dependências do TF/Keras para previsões
import pandas as pd
import numpy as np
import io
import tensorflow as tf
import math
from google.colab import files
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing
from tensorflow.keras import regularizers

# importar modelo do projeto inicial de deep learning para realizar previsões
model = files.upload()

# descompactar pasta do modelo
!unzip test.zip -d test

!pip install ipython

!pip install rasa

# Commented out IPython magic to ensure Python compatibility.
#terminal no google colab
!pip install colab-xterm
# %load_ext colabxterm
# %xterm
# DENTRO DO TERMINAL, DIGITE:
# rasa init

# OBSERVAÇÂO: O NOME DA PASTA DO PROJETO DEVE SER: test2

# PARA SAIR, DIGITE:
# exit

# PARA ABRIR O CHATBOT, DIGITE:
# rasa shell

# APOS INSTALAR O RASA EMODIFICAR OS ARQUIVOS DE PROJETO, VOLTE AQUI, RODE O TERMINAL NOVAMENTE E PARA TREINAR O CHATBOT, DIGITE:
# rasa train

# Commented out IPython magic to ensure Python compatibility.
#terminal no google colab
!pip install colab-xterm
# %load_ext colabxterm
# %xterm
# DENTRO DO TERMINAL, DIGITE:
# rasa init

# OBSERVAÇÂO: O NOME DA PASTA DO PROJETO DEVE SER: test2

# PARA SAIR, DIGITE:
# exit

# PARA ABRIR O CHATBOT, DIGITE:
# rasa shell

# APOS INSTALAR O RASA EMODIFICAR OS ARQUIVOS DE PROJETO, VOLTE AQUI, RODE O TERMINAL NOVAMENTE E PARA TREINAR O CHATBOT, DIGITE:
# rasa train

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/test2/endpoints.yml
# # This file contains the different endpoints your bot can use.
# 
# # Server where the models are pulled from.
# # https://rasa.com/docs/rasa/model-storage#fetching-models-from-a-server
# 
# #models:
# #  url: http://my-server.com/models/default_core@latest
# #  wait_time_between_pulls:  10   # [optional](default: 100)
# 
# # Server which runs your custom actions.
# # https://rasa.com/docs/rasa/custom-actions
# 
# action_endpoint:
#   url: "http://localhost:5055/webhook"
# 
# # Tracker store which is used to store the conversations.
# # By default the conversations are stored in memory.
# # https://rasa.com/docs/rasa/tracker-stores
# 
# #tracker_store:
# #    type: redis
# #    url: <host of the redis instance, e.g. localhost>
# #    port: <port of your redis instance, usually 6379>
# #    db: <number of your database within redis, e.g. 0>
# #    password: <password used for authentication>
# #    use_ssl: <whether or not the communication is encrypted, default false>
# 
# #tracker_store:
# #    type: mongod
# #    url: <url to your mongo instance, e.g. mongodb://localhost:27017>
# #    db: <name of the db within your mongo instance, e.g. rasa>
# #    username: <username used for authentication>
# #    password: <password used for authentication>
# 
# # Event broker which all conversation events should be streamed to.
# # https://rasa.com/docs/rasa/event-brokers
# 
# #event_broker:
# #  url: localhost
# #  username: username
# #  password: password
# #  queue: queue
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/test2/actions/actions.py
# 
# # script python que chama o model
# from typing import Any, Text, Dict, List
# from rasa_sdk import Action, Tracker
# from rasa.core.actions.forms import FormAction
# from rasa_sdk.events import SlotSet
# from rasa_sdk.executor import CollectingDispatcher
# import pandas as pd
# import numpy as np
# import io
# import tensorflow as tf
# import math
# from google.colab import files
# from tensorflow.keras import layers
# from tensorflow.keras.layers.experimental import preprocessing
# from tensorflow.keras import regularizers
# 
# class ActionTellTime(Action):
# 
#     def name(self) -> Text:
#         return "action_diagnostic"
# 
#     def run(self, dispatcher: CollectingDispatcher,
#             tracker: Tracker,
#             domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
# 
#         # carregar model e realizar previsão
#         model = tf.keras.models.load_model('/content/test/test')
# 
#         # obter o input dos dados do paciente:
#         val_1 = input("Média dos pontos de concavidade (concave_points_mean): ")
#         val_2 = input("Erro padrão da área (area_se): ")
#         val_3 = input("Média da concavidade (concavity_mean): ")
#         val_4 = input("Média da dimensão fractal (fractal_dimension_mean): ")
#         val_5 = input("Média do raio (radius_mean): ")
#         val_6 = input("Pior ponto concavo (concave_points_worst): ")
#         val_7 = input("Pior valor de área (area_worst): ")
#         val_8 = input("Pior índice de concavidade (concavity_worst): ")
#         val_9 = input("Média de simetria (symmetry_mean): ")
#         val_10 = input("Erro padrão de simetria (symmetry_se): ")
# 
#         patientData = {
#         'concave_points_mean': np.array([float(val_1)]),
#         'area_se': np.array([float(val_2)]),
#         'concavity_mean': np.array([float(val_3)]),
#         'fractal_dimension_mean': np.array([float(val_4)]),
#         'radius_mean': np.array([float(val_5)]),
#         'concave_points_worst': np.array([float(val_6)]),
#         'area_worst': np.array([float(val_7)]),
#         'concavity_worst': np.array([float(val_8)]),
#         'symmetry_mean': np.array([float(val_9)]),
#         'symmetry_se': np.array([float(val_10)])
#         }
# 
#         ans = model.predict(patientData)
#         print(ans)
# 
#         if(ans >= 0.5):
#           ans = math.ceil(ans)
#         elif(ans < 0.5):
#           ans = math.floor(ans)
# 
#         print(ans)
# 
#         if(ans > 0):
#           print("O algorítmo detectou a possível existência de um tumor do tipo malígno. É recomendado que o paciente procure atendimento médico profissional.")
#           print("Contudo, é necessário ressaltar a possibilidade do algoritmo ter realizado uma previsão equivocada.")
#           print("O Instituto Nacional de Câncer adverte que a detecção prematura e tratamento de prevenção ao câncer de mama possuem altos índices de sucesso quando realizados de maneira antecipada")
#         elif(ans <= 0):
#           print("O algorítmo detectou a possível existência de um tumor do tipo benigno. É recomendado que o paciente procure atendimento médico profissional.")
#           print("Contudo, é necessário ressaltar a possibilidade do algoritmo ter realizado uma previsão equivocada.")
#           print("O Instituto Nacional de Câncer adverte que a detecção prematura e tratamento de prevenção ao câncer de mama possuem altos índices de sucesso quando realizados de maneira antecipada")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/test2/data/nlu.yml
# 
# version: "3.1"
# 
# nlu:
# - intent: greet
#   examples: |
#     - oi
#     - olá
#     - bom dia
#     - boa tarde
#     - boa noite
#     - opa
# 
# - intent: goodbye
#   examples: |
#     - tchau
#     - até
#     - até mais
#     - adeus
#     - tenha um bom dia
#     - tenha uma boa tarde
#     - tenha uma boa noite      
#     - bye bye
#     - te vejo mais tarde
# 
# - intent: affirm
#   examples: |
#     - sim
#     - s
#     - certo
#     - com certeza
#     - correto
# 
# - intent: deny
#   examples: |
#     - não
#     - n
#     - nunca
#     - acho que não
#     - não quero
#     - assim não
#     - creio que não
# 
# - intent: mood_great
#   examples: |
#     - perfeito
#     - ótimo
#     - massa
#     - me sinto muito bem!
#     - muito bem!
#     - estou bem
#     
# - intent: mood_unhappy
#   examples: |
#     - meu dia foi horrível
#     - estou triste
#     - não me sinto muito bem
#     - estou desapontado
#     - estou muito triste
# 
# - intent: bot_challenge
#   examples: |
#     - você é um robô?
#     - você é um humano?
#     - estou falando com um robô?
#     - estou falando com uma pessoa?
#     - com quem estou falando?
# 
# - intent: call_diagnostic
#   examples: |
#     - iniciar diagnostico

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/test2/domain.yml
# 
# version: "3.1"
# 
# intents:
#   - greet
#   - goodbye
#   - affirm
#   - deny
#   - mood_great
#   - mood_unhappy
#   - bot_challenge
#   - call_diagnostic
# 
# responses:
#   utter_greet:
#   - text: "Oi! como vai você?"
# 
#   utter_cheer_up:
#   - text: "Não fique assim, se anime!"
# 
#   utter_did_that_help:
#   - text: "Consegui ajudar?"
# 
#   utter_happy:
#   - text: "Ótimo!"
# 
#   utter_goodbye:
#   - text: "Tchau"
# 
#   utter_iamabot:
#   - text: "Eu sou um chatbot baseado em Rasa."
# 
# actions:
# - action_diagnostic
# 
# session_config:
#   session_expiration_time: 60
#   carry_over_slots_to_new_session: true

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/test2/data/stories.yml
# 
# version: "3.1"
# 
# stories:
# 
# - story: happy path
#   steps:
#   - intent: greet
#   - action: utter_greet
#   - intent: mood_great
#   - action: utter_happy
# 
# - story: sad path 1
#   steps:
#   - intent: greet
#   - action: utter_greet
#   - intent: mood_unhappy
#   - action: utter_cheer_up
#   - action: utter_did_that_help
#   - intent: affirm
#   - action: utter_happy
# 
# - story: sad path 2
#   steps:
#   - intent: greet
#   - action: utter_greet
#   - intent: mood_unhappy
#   - action: utter_cheer_up
#   - action: utter_did_that_help
#   - intent: deny
#   - action: utter_goodbye
# 
# - story: chamar diag
#   steps:
#   - intent: call_diagnostic
#   - action: action_diagnostic

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/test2/data/rules.yml
# version: "3.1"
# 
# rules:
# 
# - rule: Say goodbye anytime the user says goodbye
#   steps:
#   - intent: goodbye
#   - action: utter_goodbye
# 
# - rule: Say 'I am a bot' anytime the user challenges
#   steps:
#   - intent: bot_challenge
#   - action: utter_iamabot
# 
# - rule: Chamar script diagnostico
#   steps:
#   - intent: call_diagnostic
#   - action: action_diagnostic

# Commented out IPython magic to ensure Python compatibility.
# %%writefile /content/test2/config.yml
# 
# # The config recipe.
# # https://rasa.com/docs/rasa/model-configuration/
# recipe: default.v1
# 
# # Configuration for Rasa NLU.
# # https://rasa.com/docs/rasa/nlu/components/
# language: pt
# 
# pipeline:
# # # No configuration for the NLU pipeline was provided. The following default pipeline was used to train your model.
# # # If you'd like to customize it, uncomment and adjust the pipeline.
# # # See https://rasa.com/docs/rasa/tuning-your-model for more information.
# #   - name: WhitespaceTokenizer
# #   - name: RegexFeaturizer
# #   - name: LexicalSyntacticFeaturizer
# #   - name: CountVectorsFeaturizer
# #   - name: CountVectorsFeaturizer
# #     analyzer: char_wb
# #     min_ngram: 1
# #     max_ngram: 4
# #   - name: DIETClassifier
# #     epochs: 100
# #     constrain_similarities: true
# #   - name: EntitySynonymMapper
# #   - name: ResponseSelector
# #     epochs: 100
# #     constrain_similarities: true
# #   - name: FallbackClassifier
# #     threshold: 0.3
# #     ambiguity_threshold: 0.1
# 
# # Configuration for Rasa Core.
# # https://rasa.com/docs/rasa/core/policies/
# policies:
# # # No configuration for policies was provided. The following default policies were used to train your model.
# # # If you'd like to customize them, uncomment and adjust the policies.
# # # See https://rasa.com/docs/rasa/policies for more information.
# #   - name: MemoizationPolicy
# #   - name: RulePolicy
# #   - name: UnexpecTEDIntentPolicy
# #     max_history: 5
# #     epochs: 100
# #   - name: TEDPolicy
# #     max_history: 5
# #     epochs: 100
# #     constrain_similarities: true
#

#script python

# carregar model e realizar previsão
model = tf.keras.models.load_model('test/test')

# obter o input dos dados do paciente:
val_1 = input("Média dos pontos de concavidade (concave_points_mean): ")
val_2 = input("Erro padrão da área (area_se): ")
val_3 = input("Média da concavidade (concavity_mean): ")
val_4 = input("Média da dimensão fractal (fractal_dimension_mean): ")
val_5 = input("Média do raio (radius_mean): ")
val_6 = input("Pior ponto concavo (concave_points_worst): ")
val_7 = input("Pior valor de área (area_worst): ")
val_8 = input("Pior índice de concavidade (concavity_worst): ")
val_9 = input("Média de simetria (symmetry_mean): ")
val_10 = input("Erro padrão de simetria (symmetry_se): ")

patientData = {
  'concave_points_mean': np.array([float(val_1)]),
  'area_se': np.array([float(val_2)]),
  'concavity_mean': np.array([float(val_3)]),
  'fractal_dimension_mean': np.array([float(val_4)]),
  'radius_mean': np.array([float(val_5)]),
  'concave_points_worst': np.array([float(val_6)]),
  'area_worst': np.array([float(val_7)]),
  'concavity_worst': np.array([float(val_8)]),
  'symmetry_mean': np.array([float(val_9)]),
  'symmetry_se': np.array([float(val_10)])
  }

ans = model.predict(patientData)
print(ans)

if(ans >= 0.5):
  ans= math.ceil(ans)
elif(ans < 0.5):
  ans = math.floor(ans)

print(ans)

if(ans > 0):
  print("O algorítmo detectou a possível existência de um tumor do tipo malígno. É recomendado que o paciente procure atendimento médico profissional.")
  print("Contudo, é necessário ressaltar a possibilidade do algoritmo ter realizado uma previsão equivocada.")
  print("O Instituto Nacional de Câncer adverte que a detecção prematura e tratamento de prevenção ao câncer de mama possuem altos índices de sucesso quando realizados de maneira antecipada")
elif(ans <= 0):
  print("O algorítmo detectou a possível existência de um tumor do tipo benigno. É recomendado que o paciente procure atendimento médico profissional.")
  print("Contudo, é necessário ressaltar a possibilidade do algoritmo ter realizado uma previsão equivocada.")
  print("O Instituto Nacional de Câncer adverte que a detecção prematura e tratamento de prevenção ao câncer de mama possuem altos índices de sucesso quando realizados de maneira antecipada")